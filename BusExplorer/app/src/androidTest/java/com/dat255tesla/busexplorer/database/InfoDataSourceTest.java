package com.dat255tesla.busexplorer.database;

import android.test.AndroidTestCase;
import android.test.RenamingDelegatingContext;

import java.sql.SQLException;
import java.util.List;

public class InfoDataSourceTest extends AndroidTestCase {
    private InfoDataSource ids;

    /**
     * Sets up and retrieves a writable database.
     *
     * @throws Exception
     */
    @Override
    protected void setUp() throws Exception {
        super.setUp();
        // Mock context
        RenamingDelegatingContext context = new RenamingDelegatingContext(getContext(), "test_");
        ids = new InfoDataSource(context);
        ids.open();
    }

    /**
     * Tears down, clears the database tables and closes the writable database.
     *
     * @throws Exception
     */
    @Override
    protected void tearDown() throws Exception {
        super.tearDown();
        ids.clearTable();
        ids.close();
    }

    /**
     * Testing basic database operations (CRUD) using our implemented class InfoDataSource.
     * It is the internal database that is being tested.
     *
     * @throws SQLException
     */
    public void testDbFun() throws SQLException {
        // Test create/insert into database
        InfoNode a = ids.createInfoNode("A", 0, 0, 0, "Info_1", "Addr_1", 111111111, "ObjID");
        InfoNode b = ids.createInfoNode("B", 0, 0, 0, "Info_2", "Addr_2", 222222222, "ObjID");
        InfoNode c = ids.createInfoNode("C", 0, 0, 0, "Info_3", "Addr_3", 333333333, "ObjID");
        // Test get all data from database
        List<InfoNode> infoNodes = ids.getAllInfoNodes();
        /**
         * Checks if the retrieved data contains all inserted data.
         * (We only compare title for now, we test the unit in another class/separate test).
         * Checks that the InfoNode's created doesn't have the same Id (which is generated by the database).
         * Also checks that getLatestModified() method returns the right value.
         */
        assertTrue(infoNodes.size() == 3);
        assertTrue(infoNodes.get(0).getTitle().equals(a.getTitle()));
        assertTrue(infoNodes.get(1).getTitle().equals(b.getTitle()));
        assertTrue(infoNodes.get(2).getTitle().equals(c.getTitle()));
        assertTrue(a.getId() != b.getId() && a.getId() != c.getId() && b.getId() != c.getId());
        assertTrue(ids.getLatestModified() == c.getLatestModified());
        // Test delete from database
        ids.deleteInfoNode(b);
        /**
         * Checks that the deleted data is gone and that the other data still remains.
         */
        infoNodes = ids.getAllInfoNodes();
        assertTrue(infoNodes.size() == 2);
        assertTrue(infoNodes.get(0).getTitle().equals(a.getTitle()));
        assertTrue(infoNodes.get(1).getTitle().equals(c.getTitle()));
        // Test clear all data from table
        ids.clearTable();
        assertTrue(ids.getAllInfoNodes().isEmpty());
    }

}
